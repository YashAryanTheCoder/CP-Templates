// make the graph vector as per your demand
#include<bits/stdc++.h>
using namespace std;
#define int long long
#define INF 10000
vector<vector<int>> floyd_warshall(vector<vector<int>> graph)
{
    vector<vector<int>> dist(graph);
    int V=graph.size();
    for(int k=0;k<V;k++) //intermediate vertex
    {
        for(int i=0;i<V;i++) //iterate over 2D matrix
        {
            for(int j=0;j<V;j++)
            {
                dist[i][j]=min(dist[i][j],dist[i][k]+dist[k][j]);
            }
        }
    }
    return dist;
}
int32_t main()
{
    vector<vector<int>> graph={
            {0,INF,-2, INF},
            {4,0,3,INF},
            {INF,INF,0,2},
            {INF,-1,INF,0}

    };
    auto result=floyd_warshall(graph);
    int n=result.size();
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            cout<<result[i][j]<<" ";
        }
        cout<<endl;
    }
    return 0;
} 