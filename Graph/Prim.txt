// we will use priority queue
#include<bits/stdc++.h>
using namespace std;
#define int long long
class Graph{
    vector<pair<int,int>> *l;
    int V;
    public:
    Graph(int V)
    {
        this->V=V;
        l=new vector<pair<int,int>>[V];
    }
    void addEdge(int x, int y, int w)
    {
        l[x].push_back({y,w});
        l[y].push_back({x,w});
    }
    int prim_mst()
    {
        int ans=0;
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> Q;
        Q.push({0,0});
        bool * visited=new bool[V]{0};
        while(!Q.empty())
        {
            auto best=Q.top();
            Q.pop();
            int to=best.second;
            int weight=best.first;
            if(visited[to])
            {
                continue;
            }
            visited[to]=1;
            ans+=weight;
            for(auto x:l[to])
            {
                if(!visited[x.first])
                {
                    Q.push({x.second,x.first});
                }
            }    
            
        }
        return ans;
    }

};
int32_t main()
{
    int v,e;
    cin>>v>>e;
    Graph g(v);
    for(int i=0;i<e;i++)
    {
        int x,y,w;
        cin>>x>>y>>w;
        g.addEdge(x-1,y-1,w); // for 1 based indexing
    }
    cout<<g.prim_mst()<<endl;
    return 0;
}